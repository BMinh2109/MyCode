
BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f5c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800214c  0800214c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800214c  0800214c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800214c  0800214c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800214c  0800214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002150  08002150  00012150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002158  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002158  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006115  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d5  00000000  00000000  00026149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00027420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  00027a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b6e  00000000  00000000  00027f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005820  00000000  00000000  00041af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882f2  00000000  00000000  00047316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf608  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000cf658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800211c 	.word	0x0800211c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	0800211c 	.word	0x0800211c

08000218 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f043 0201 	orr.w	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6a1a      	ldr	r2, [r3, #32]
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	431a      	orrs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	621a      	str	r2, [r3, #32]
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr

0800025a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
 8000262:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	635a      	str	r2, [r3, #52]	; 0x34
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr

08000276 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000276:	b480      	push	{r7}
 8000278:	b083      	sub	sp, #12
 800027a:	af00      	add	r7, sp, #0
 800027c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000282:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	645a      	str	r2, [r3, #68]	; 0x44
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f06f 0201 	mvn.w	r2, #1
 80002a4:	611a      	str	r2, [r3, #16]
}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b083      	sub	sp, #12
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d101      	bne.n	80002ca <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr

080002d8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	f043 0201 	orr.w	r2, r3, #1
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	60da      	str	r2, [r3, #12]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f043 0201 	orr.w	r2, r3, #1
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	615a      	str	r2, [r3, #20]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	4013      	ands	r3, r2
 800032e:	041a      	lsls	r2, r3, #16
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	43d9      	mvns	r1, r3
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	400b      	ands	r3, r1
 8000338:	431a      	orrs	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	619a      	str	r2, [r3, #24]
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <_ZN3pwm3HAL4initEv>:
#include <tim.h>
#include <Timer/pwm.h>

//extern TIM_HandleTypeDef htim1;

void pwm::HAL::init(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	MX_TIM1_Init();
 8000350:	f000 fcea 	bl	8000d28 <MX_TIM1_Init>
	LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8000354:	2101      	movs	r1, #1
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <_ZN3pwm3HAL4initEv+0x20>)
 8000358:	f7ff ff6e 	bl	8000238 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM1);
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <_ZN3pwm3HAL4initEv+0x20>)
 800035e:	f7ff ff5b 	bl	8000218 <LL_TIM_EnableCounter>
	LL_TIM_GenerateEvent_UPDATE(TIM1);
 8000362:	4802      	ldr	r0, [pc, #8]	; (800036c <_ZN3pwm3HAL4initEv+0x20>)
 8000364:	f7ff ffc8 	bl	80002f8 <LL_TIM_GenerateEvent_UPDATE>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40012c00 	.word	0x40012c00

08000370 <_ZN3pwm3HAL2onEi>:

void pwm::HAL::on(int pulse){
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	LL_TIM_OC_SetCompareCH1(TIM1, pulse);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4619      	mov	r1, r3
 800037c:	4810      	ldr	r0, [pc, #64]	; (80003c0 <_ZN3pwm3HAL2onEi+0x50>)
 800037e:	f7ff ff6c 	bl	800025a <LL_TIM_OC_SetCompareCH1>
		LL_TIM_ClearFlag_UPDATE( TIM1 );
 8000382:	480f      	ldr	r0, [pc, #60]	; (80003c0 <_ZN3pwm3HAL2onEi+0x50>)
 8000384:	f7ff ff87 	bl	8000296 <LL_TIM_ClearFlag_UPDATE>
		while ( LL_TIM_IsActiveFlag_UPDATE( TIM1 ) == 0u ){}
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <_ZN3pwm3HAL2onEi+0x50>)
 800038a:	f7ff ff92 	bl	80002b2 <LL_TIM_IsActiveFlag_UPDATE>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	bf0c      	ite	eq
 8000394:	2301      	moveq	r3, #1
 8000396:	2300      	movne	r3, #0
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d000      	beq.n	80003a0 <_ZN3pwm3HAL2onEi+0x30>
 800039e:	e7f3      	b.n	8000388 <_ZN3pwm3HAL2onEi+0x18>
		//LL_TIM_ClearFlag_UPDATE( TIM1 );
		TIM1->BDTR |= LL_TIM_OSSI_ENABLE;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <_ZN3pwm3HAL2onEi+0x50>)
 80003a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <_ZN3pwm3HAL2onEi+0x50>)
 80003a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003aa:	6453      	str	r3, [r2, #68]	; 0x44
		LL_TIM_EnableAllOutputs( TIM1 );
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <_ZN3pwm3HAL2onEi+0x50>)
 80003ae:	f7ff ff62 	bl	8000276 <LL_TIM_EnableAllOutputs>
		LL_TIM_EnableIT_UPDATE( TIM1 );
 80003b2:	4803      	ldr	r0, [pc, #12]	; (80003c0 <_ZN3pwm3HAL2onEi+0x50>)
 80003b4:	f7ff ff90 	bl	80002d8 <LL_TIM_EnableIT_UPDATE>
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <TIM1_UP_TIM16_IRQHandler>:

extern "C" void TIM1_UP_TIM16_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80003c8:	2120      	movs	r1, #32
 80003ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ce:	f7ff ffa3 	bl	8000318 <LL_GPIO_TogglePin>
	LL_TIM_ClearFlag_UPDATE(TIM1);
 80003d2:	4802      	ldr	r0, [pc, #8]	; (80003dc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80003d4:	f7ff ff5f 	bl	8000296 <LL_TIM_ClearFlag_UPDATE>

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40012c00 	.word	0x40012c00

080003e0 <main>:
#include <main.h>
#include <gpio.h>
#include <Timer/pwm.h>
extern "C" void SystemClock_Config(void);
int main()
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80003e4:	f000 fa5e 	bl	80008a4 <SystemClock_Config>
	MX_GPIO_Init();
 80003e8:	f000 f8e0 	bl	80005ac <MX_GPIO_Init>
	pwm::HAL::init();
 80003ec:	f7ff ffae 	bl	800034c <_ZN3pwm3HAL4initEv>
	pwm::HAL::on(8500);
 80003f0:	f242 1034 	movw	r0, #8500	; 0x2134
 80003f4:	f7ff ffbc 	bl	8000370 <_ZN3pwm3HAL2onEi>
while (1)
 80003f8:	e7fe      	b.n	80003f8 <main+0x18>
	...

080003fc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000408:	4907      	ldr	r1, [pc, #28]	; (8000428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4313      	orrs	r3, r2
 800040e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4013      	ands	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	bf00      	nop
 800041e:	3714      	adds	r7, #20
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800042c:	b480      	push	{r7}
 800042e:	b087      	sub	sp, #28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f003 0303 	and.w	r3, r3, #3
 800043e:	3302      	adds	r3, #2
 8000440:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	0c1b      	lsrs	r3, r3, #16
 8000448:	43db      	mvns	r3, r3
 800044a:	ea02 0103 	and.w	r1, r2, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	0c1b      	lsrs	r3, r3, #16
 8000452:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	fa93 f3a3 	rbit	r3, r3
 800045a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d101      	bne.n	800046a <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8000466:	2320      	movs	r3, #32
 8000468:	e003      	b.n	8000472 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	fab3 f383 	clz	r3, r3
 8000470:	b2db      	uxtb	r3, r3
 8000472:	f003 031f 	and.w	r3, r3, #31
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	409a      	lsls	r2, r3
 800047a:	4807      	ldr	r0, [pc, #28]	; (8000498 <LL_SYSCFG_SetEXTISource+0x6c>)
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	430a      	orrs	r2, r1
 8000484:	3302      	adds	r3, #2
 8000486:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800048a:	bf00      	nop
 800048c:	371c      	adds	r7, #28
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40010000 	.word	0x40010000

0800049c <LL_GPIO_SetPinMode>:
{
 800049c:	b480      	push	{r7}
 800049e:	b08b      	sub	sp, #44	; 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	fa93 f3a3 	rbit	r3, r3
 80004b6:	613b      	str	r3, [r7, #16]
  return result;
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80004bc:	69bb      	ldr	r3, [r7, #24]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d101      	bne.n	80004c6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80004c2:	2320      	movs	r3, #32
 80004c4:	e003      	b.n	80004ce <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	fab3 f383 	clz	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	2103      	movs	r1, #3
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	43db      	mvns	r3, r3
 80004d8:	401a      	ands	r2, r3
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004de:	6a3b      	ldr	r3, [r7, #32]
 80004e0:	fa93 f3a3 	rbit	r3, r3
 80004e4:	61fb      	str	r3, [r7, #28]
  return result;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80004ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d101      	bne.n	80004f4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80004f0:	2320      	movs	r3, #32
 80004f2:	e003      	b.n	80004fc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80004f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f6:	fab3 f383 	clz	r3, r3
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	431a      	orrs	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	bf00      	nop
 800050c:	372c      	adds	r7, #44	; 0x2c
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <LL_GPIO_SetPinPull>:
{
 8000516:	b480      	push	{r7}
 8000518:	b08b      	sub	sp, #44	; 0x2c
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	68da      	ldr	r2, [r3, #12]
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	fa93 f3a3 	rbit	r3, r3
 8000530:	613b      	str	r3, [r7, #16]
  return result;
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d101      	bne.n	8000540 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800053c:	2320      	movs	r3, #32
 800053e:	e003      	b.n	8000548 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	fab3 f383 	clz	r3, r3
 8000546:	b2db      	uxtb	r3, r3
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	2103      	movs	r1, #3
 800054c:	fa01 f303 	lsl.w	r3, r1, r3
 8000550:	43db      	mvns	r3, r3
 8000552:	401a      	ands	r2, r3
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	fa93 f3a3 	rbit	r3, r3
 800055e:	61fb      	str	r3, [r7, #28]
  return result;
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800056a:	2320      	movs	r3, #32
 800056c:	e003      	b.n	8000576 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	fab3 f383 	clz	r3, r3
 8000574:	b2db      	uxtb	r3, r3
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	431a      	orrs	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	60da      	str	r2, [r3, #12]
}
 8000584:	bf00      	nop
 8000586:	372c      	adds	r7, #44	; 0x2c
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <LL_GPIO_ResetOutputPin>:
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80005ce:	2004      	movs	r0, #4
 80005d0:	f7ff ff14 	bl	80003fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80005d4:	2020      	movs	r0, #32
 80005d6:	f7ff ff11 	bl	80003fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80005da:	2001      	movs	r0, #1
 80005dc:	f7ff ff0e 	bl	80003fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80005e0:	2002      	movs	r0, #2
 80005e2:	f7ff ff0b 	bl	80003fc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80005e6:	2120      	movs	r1, #32
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f7ff ffd0 	bl	8000590 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80005f0:	491a      	ldr	r1, [pc, #104]	; (800065c <MX_GPIO_Init+0xb0>)
 80005f2:	2002      	movs	r0, #2
 80005f4:	f7ff ff1a 	bl	800042c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80005f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80005fe:	2301      	movs	r3, #1
 8000600:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000604:	2300      	movs	r3, #0
 8000606:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800060a:	2301      	movs	r3, #1
 800060c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd95 	bl	8001144 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	480f      	ldr	r0, [pc, #60]	; (8000660 <MX_GPIO_Init+0xb4>)
 8000622:	f7ff ff78 	bl	8000516 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <MX_GPIO_Init+0xb4>)
 800062e:	f7ff ff35 	bl	800049c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000632:	2320      	movs	r3, #32
 8000634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000636:	2301      	movs	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f000 ffbd 	bl	80015cc <LL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	00f00003 	.word	0x00f00003
 8000660:	48000800 	.word	0x48000800

08000664 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <LL_RCC_HSI_Enable+0x1c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <LL_RCC_HSI_Enable+0x1c>)
 800066e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <LL_RCC_HSI_IsReady+0x24>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000694:	d101      	bne.n	800069a <LL_RCC_HSI_IsReady+0x16>
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <LL_RCC_HSI_IsReady+0x18>
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	061b      	lsls	r3, r3, #24
 80006c0:	4904      	ldr	r1, [pc, #16]	; (80006d4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006c2:	4313      	orrs	r3, r2
 80006c4:	604b      	str	r3, [r1, #4]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <LL_RCC_SetSysClkSource+0x24>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	f023 0203 	bic.w	r2, r3, #3
 80006e8:	4904      	ldr	r1, [pc, #16]	; (80006fc <LL_RCC_SetSysClkSource+0x24>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	608b      	str	r3, [r1, #8]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <LL_RCC_GetSysClkSource+0x18>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	f003 030c 	and.w	r3, r3, #12
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <LL_RCC_SetAHBPrescaler+0x24>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800072c:	4904      	ldr	r1, [pc, #16]	; (8000740 <LL_RCC_SetAHBPrescaler+0x24>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	608b      	str	r3, [r1, #8]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000

08000744 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <LL_RCC_SetAPB1Prescaler+0x24>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000754:	4904      	ldr	r1, [pc, #16]	; (8000768 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	608b      	str	r3, [r1, #8]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40021000 	.word	0x40021000

0800076c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800077c:	4904      	ldr	r1, [pc, #16]	; (8000790 <LL_RCC_SetAPB2Prescaler+0x24>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	608b      	str	r3, [r1, #8]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40021000 	.word	0x40021000

08000794 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <LL_RCC_PLL_Enable+0x1c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <LL_RCC_PLL_Enable+0x1c>)
 800079e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000

080007b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <LL_RCC_PLL_IsReady+0x24>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007c4:	d101      	bne.n	80007ca <LL_RCC_PLL_IsReady+0x16>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <LL_RCC_PLL_IsReady+0x18>
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80007ec:	68da      	ldr	r2, [r3, #12]
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80007f0:	4013      	ands	r3, r2
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	4311      	orrs	r1, r2
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	0212      	lsls	r2, r2, #8
 80007fc:	4311      	orrs	r1, r2
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	430a      	orrs	r2, r1
 8000802:	4904      	ldr	r1, [pc, #16]	; (8000814 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000804:	4313      	orrs	r3, r2
 8000806:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	40021000 	.word	0x40021000
 8000818:	f9ff800c 	.word	0xf9ff800c

0800081c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800082a:	60d3      	str	r3, [r2, #12]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000

0800083c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <LL_FLASH_SetLatency+0x24>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f023 020f 	bic.w	r2, r3, #15
 800084c:	4904      	ldr	r1, [pc, #16]	; (8000860 <LL_FLASH_SetLatency+0x24>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	600b      	str	r3, [r1, #0]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40022000 	.word	0x40022000

08000864 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <LL_FLASH_GetLatency+0x18>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 030f 	and.w	r3, r3, #15
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <LL_PWR_EnableRange1BoostMode>:
  * @brief  Enable main regulator voltage range 1 boost mode
  * @rmtoll CR5          R1MODE        LL_PWR_EnableRange1BoostMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableRange1BoostMode(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <LL_PWR_EnableRange1BoostMode+0x20>)
 8000886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <LL_PWR_EnableRange1BoostMode+0x20>)
 800088c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40007000 	.word	0x40007000

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 80008aa:	2004      	movs	r0, #4
 80008ac:	f7ff ffc6 	bl	800083c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_4)
 80008b0:	bf00      	nop
 80008b2:	f7ff ffd7 	bl	8000864 <LL_FLASH_GetLatency>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d1fa      	bne.n	80008b2 <SystemClock_Config+0xe>
  {
  }
  LL_PWR_EnableRange1BoostMode();
 80008bc:	f7ff ffe0 	bl	8000880 <LL_PWR_EnableRange1BoostMode>
  LL_RCC_HSI_Enable();
 80008c0:	f7ff fed0 	bl	8000664 <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008c4:	bf00      	nop
 80008c6:	f7ff fedd 	bl	8000684 <LL_RCC_HSI_IsReady>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d1fa      	bne.n	80008c6 <SystemClock_Config+0x22>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 80008d0:	2040      	movs	r0, #64	; 0x40
 80008d2:	f7ff feeb 	bl	80006ac <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_4, 85, LL_RCC_PLLR_DIV_2);
 80008d6:	2300      	movs	r3, #0
 80008d8:	2255      	movs	r2, #85	; 0x55
 80008da:	2130      	movs	r1, #48	; 0x30
 80008dc:	2002      	movs	r0, #2
 80008de:	f7ff ff7d 	bl	80007dc <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80008e2:	f7ff ff9b 	bl	800081c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80008e6:	f7ff ff55 	bl	8000794 <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80008ea:	bf00      	nop
 80008ec:	f7ff ff62 	bl	80007b4 <LL_RCC_PLL_IsReady>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d1fa      	bne.n	80008ec <SystemClock_Config+0x48>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008f6:	2003      	movs	r0, #3
 80008f8:	f7ff feee 	bl	80006d8 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80008fc:	2080      	movs	r0, #128	; 0x80
 80008fe:	f7ff ff0d 	bl	800071c <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000902:	bf00      	nop
 8000904:	f7ff fefc 	bl	8000700 <LL_RCC_GetSysClkSource>
 8000908:	4603      	mov	r3, r0
 800090a:	2b0c      	cmp	r3, #12
 800090c:	d1fa      	bne.n	8000904 <SystemClock_Config+0x60>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 800090e:	2355      	movs	r3, #85	; 0x55
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	e002      	b.n	800091a <SystemClock_Config+0x76>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1f9      	bne.n	8000914 <SystemClock_Config+0x70>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fefb 	bl	800071c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff ff0c 	bl	8000744 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ff1d 	bl	800076c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(170000000);
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <SystemClock_Config+0xa4>)
 8000934:	f001 fba8 	bl	8002088 <LL_Init1msTick>

  LL_SetSystemCoreClock(170000000);
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <SystemClock_Config+0xa4>)
 800093a:	f001 fbb3 	bl	80020a4 <LL_SetSystemCoreClock>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	0a21fe80 	.word	0x0a21fe80

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <LL_AHB2_GRP1_EnableClock>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4013      	ands	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000

08000b0c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4013      	ands	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40021000 	.word	0x40021000

08000b3c <LL_TIM_EnableARRPreload>:
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_TIM_OC_DisableFast>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d02e      	beq.n	8000bca <LL_TIM_OC_DisableFast+0x6e>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d029      	beq.n	8000bc6 <LL_TIM_OC_DisableFast+0x6a>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b10      	cmp	r3, #16
 8000b76:	d024      	beq.n	8000bc2 <LL_TIM_OC_DisableFast+0x66>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d01f      	beq.n	8000bbe <LL_TIM_OC_DisableFast+0x62>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d019      	beq.n	8000bba <LL_TIM_OC_DisableFast+0x5e>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b8c:	d013      	beq.n	8000bb6 <LL_TIM_OC_DisableFast+0x5a>
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b94:	d00d      	beq.n	8000bb2 <LL_TIM_OC_DisableFast+0x56>
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b9c:	d007      	beq.n	8000bae <LL_TIM_OC_DisableFast+0x52>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba4:	d101      	bne.n	8000baa <LL_TIM_OC_DisableFast+0x4e>
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	e010      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000baa:	2309      	movs	r3, #9
 8000bac:	e00e      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bae:	2307      	movs	r3, #7
 8000bb0:	e00c      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	e00a      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	e008      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bba:	2304      	movs	r3, #4
 8000bbc:	e006      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e004      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	e002      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e000      	b.n	8000bcc <LL_TIM_OC_DisableFast+0x70>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3318      	adds	r3, #24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LL_TIM_OC_DisableFast+0xa8>)
 8000bd8:	5cd3      	ldrb	r3, [r2, r3]
 8000bda:	440b      	add	r3, r1
 8000bdc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	4908      	ldr	r1, [pc, #32]	; (8000c08 <LL_TIM_OC_DisableFast+0xac>)
 8000be6:	5ccb      	ldrb	r3, [r1, r3]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2304      	movs	r3, #4
 8000bec:	408b      	lsls	r3, r1
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	08002134 	.word	0x08002134
 8000c08:	08002140 	.word	0x08002140

08000c0c <LL_TIM_OC_EnablePreload>:
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d02e      	beq.n	8000c7a <LL_TIM_OC_EnablePreload+0x6e>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d029      	beq.n	8000c76 <LL_TIM_OC_EnablePreload+0x6a>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2b10      	cmp	r3, #16
 8000c26:	d024      	beq.n	8000c72 <LL_TIM_OC_EnablePreload+0x66>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b40      	cmp	r3, #64	; 0x40
 8000c2c:	d01f      	beq.n	8000c6e <LL_TIM_OC_EnablePreload+0x62>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c34:	d019      	beq.n	8000c6a <LL_TIM_OC_EnablePreload+0x5e>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3c:	d013      	beq.n	8000c66 <LL_TIM_OC_EnablePreload+0x5a>
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c44:	d00d      	beq.n	8000c62 <LL_TIM_OC_EnablePreload+0x56>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c4c:	d007      	beq.n	8000c5e <LL_TIM_OC_EnablePreload+0x52>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c54:	d101      	bne.n	8000c5a <LL_TIM_OC_EnablePreload+0x4e>
 8000c56:	2308      	movs	r3, #8
 8000c58:	e010      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c5a:	2309      	movs	r3, #9
 8000c5c:	e00e      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c5e:	2307      	movs	r3, #7
 8000c60:	e00c      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c62:	2306      	movs	r3, #6
 8000c64:	e00a      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c66:	2305      	movs	r3, #5
 8000c68:	e008      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	e006      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e004      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c72:	2302      	movs	r3, #2
 8000c74:	e002      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <LL_TIM_OC_EnablePreload+0x70>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3318      	adds	r3, #24
 8000c82:	4619      	mov	r1, r3
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LL_TIM_OC_EnablePreload+0xa4>)
 8000c88:	5cd3      	ldrb	r3, [r2, r3]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <LL_TIM_OC_EnablePreload+0xa8>)
 8000c96:	5ccb      	ldrb	r3, [r1, r3]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	408b      	lsls	r3, r1
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	08002134 	.word	0x08002134
 8000cb4:	08002140 	.word	0x08002140

08000cb8 <LL_TIM_SetTriggerOutput>:
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	605a      	str	r2, [r3, #4]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_TIM_SetTriggerOutput2>:
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	605a      	str	r2, [r3, #4]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_TIM_DisableMasterSlaveMode>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0a0      	sub	sp, #128	; 0x80
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000d3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d42:	2220      	movs	r2, #32
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 f9e0 	bl	800210c <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2230      	movs	r2, #48	; 0x30
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 f9d9 	bl	800210c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000d6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d6e:	f7ff fecd 	bl	8000b0c <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d72:	f7ff fe29 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe79 	bl	8000a74 <NVIC_EncodePriority>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4619      	mov	r1, r3
 8000d86:	2019      	movs	r0, #25
 8000d88:	f7ff fe4a 	bl	8000a20 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d8c:	2019      	movs	r0, #25
 8000d8e:	f7ff fe29 	bl	80009e4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8000d92:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d96:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 16999;
 8000d9e:	f244 2367 	movw	r3, #16999	; 0x4267
 8000da2:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000dac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4835      	ldr	r0, [pc, #212]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000db4:	f000 fd08 	bl	80017c8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8000db8:	4833      	ldr	r0, [pc, #204]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000dba:	f7ff febf 	bl	8000b3c <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	4831      	ldr	r0, [pc, #196]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000dc2:	f7ff ff23 	bl	8000c0c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000dc6:	2360      	movs	r3, #96	; 0x60
 8000dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000de6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dea:	461a      	mov	r2, r3
 8000dec:	2101      	movs	r1, #1
 8000dee:	4826      	ldr	r0, [pc, #152]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000df0:	f000 fd74 	bl	80018dc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000df4:	2101      	movs	r1, #1
 8000df6:	4824      	ldr	r0, [pc, #144]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000df8:	f7ff feb0 	bl	8000b5c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000e00:	f7ff ff5a 	bl	8000cb8 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000e04:	2100      	movs	r1, #0
 8000e06:	4820      	ldr	r0, [pc, #128]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000e08:	f7ff ff6b 	bl	8000ce2 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000e0e:	f7ff ff7b 	bl	8000d08 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_TIM1_Init+0x160>)
 8000e54:	f000 fda2 	bl	800199c <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e58:	2004      	movs	r0, #4
 8000e5a:	f7ff fe3f 	bl	8000adc <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e62:	2302      	movs	r3, #2
 8000e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_TIM1_Init+0x164>)
 8000e7c:	f000 fba6 	bl	80015cc <LL_GPIO_Init>

}
 8000e80:	bf00      	nop
 8000e82:	3780      	adds	r7, #128	; 0x80
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012c00 	.word	0x40012c00
 8000e8c:	48000800 	.word	0x48000800

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eba:	f7ff fd73 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f001 f901 	bl	80020c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff fa8d 	bl	80003e0 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   r0, =_estack
 8000ec8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ed4:	08002154 	.word	0x08002154
  ldr r2, =_sbss
 8000ed8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000edc:	20000020 	.word	0x20000020

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <LL_EXTI_EnableIT_0_31+0x20>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4904      	ldr	r1, [pc, #16]	; (8000f04 <LL_EXTI_EnableIT_0_31+0x20>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	600b      	str	r3, [r1, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40010400 	.word	0x40010400

08000f08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <LL_EXTI_EnableIT_32_63+0x20>)
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	4904      	ldr	r1, [pc, #16]	; (8000f28 <LL_EXTI_EnableIT_32_63+0x20>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	620b      	str	r3, [r1, #32]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40010400 	.word	0x40010400

08000f2c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <LL_EXTI_DisableIT_0_31+0x24>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	4904      	ldr	r1, [pc, #16]	; (8000f50 <LL_EXTI_DisableIT_0_31+0x24>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40010400 	.word	0x40010400

08000f54 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <LL_EXTI_DisableIT_32_63+0x24>)
 8000f5e:	6a1a      	ldr	r2, [r3, #32]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4904      	ldr	r1, [pc, #16]	; (8000f78 <LL_EXTI_DisableIT_32_63+0x24>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	620b      	str	r3, [r1, #32]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40010400 	.word	0x40010400

08000f7c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4904      	ldr	r1, [pc, #16]	; (8000f9c <LL_EXTI_EnableEvent_0_31+0x20>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]

}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fac:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4904      	ldr	r1, [pc, #16]	; (8000fe8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	604b      	str	r3, [r1, #4]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40010400 	.word	0x40010400

08000fec <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	4904      	ldr	r1, [pc, #16]	; (8001010 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40010400 	.word	0x40010400

08001014 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	4904      	ldr	r1, [pc, #16]	; (8001034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	608b      	str	r3, [r1, #8]

}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40010400 	.word	0x40010400

08001038 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001044:	4904      	ldr	r1, [pc, #16]	; (8001058 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4313      	orrs	r3, r2
 800104a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40010400 	.word	0x40010400

0800105c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	43db      	mvns	r3, r3
 800106c:	4904      	ldr	r1, [pc, #16]	; (8001080 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800106e:	4013      	ands	r3, r2
 8001070:	608b      	str	r3, [r1, #8]

}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40010400 	.word	0x40010400

08001084 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800108e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	43db      	mvns	r3, r3
 8001094:	4904      	ldr	r1, [pc, #16]	; (80010a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001096:	4013      	ands	r3, r2
 8001098:	628b      	str	r3, [r1, #40]	; 0x28
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40010400 	.word	0x40010400

080010ac <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4313      	orrs	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40010400 	.word	0x40010400

080010d0 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80010da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010dc:	4904      	ldr	r1, [pc, #16]	; (80010f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40010400 	.word	0x40010400

080010f4 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	43db      	mvns	r3, r3
 8001104:	4904      	ldr	r1, [pc, #16]	; (8001118 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001106:	4013      	ands	r3, r2
 8001108:	60cb      	str	r3, [r1, #12]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40010400 	.word	0x40010400

0800111c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	43db      	mvns	r3, r3
 800112c:	4904      	ldr	r1, [pc, #16]	; (8001140 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800112e:	4013      	ands	r3, r2
 8001130:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40010400 	.word	0x40010400

08001144 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7a1b      	ldrb	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80d3 	beq.w	8001300 <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d063      	beq.n	800122a <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7a5b      	ldrb	r3, [r3, #9]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d01c      	beq.n	80011a4 <LL_EXTI_Init+0x60>
 800116a:	2b02      	cmp	r3, #2
 800116c:	dc25      	bgt.n	80011ba <LL_EXTI_Init+0x76>
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <LL_EXTI_Init+0x34>
 8001172:	2b01      	cmp	r3, #1
 8001174:	d00b      	beq.n	800118e <LL_EXTI_Init+0x4a>
 8001176:	e020      	b.n	80011ba <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff21 	bl	8000fc4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff feac 	bl	8000ee4 <LL_EXTI_EnableIT_0_31>
          break;
 800118c:	e018      	b.n	80011c0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff feca 	bl	8000f2c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff feed 	bl	8000f7c <LL_EXTI_EnableEvent_0_31>
          break;
 80011a2:	e00d      	b.n	80011c0 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe9b 	bl	8000ee4 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fee2 	bl	8000f7c <LL_EXTI_EnableEvent_0_31>
          break;
 80011b8:	e002      	b.n	80011c0 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80011ba:	2301      	movs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
          break;
 80011be:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7a9b      	ldrb	r3, [r3, #10]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d030      	beq.n	800122a <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7a9b      	ldrb	r3, [r3, #10]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d01c      	beq.n	800120a <LL_EXTI_Init+0xc6>
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	dc25      	bgt.n	8001220 <LL_EXTI_Init+0xdc>
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d002      	beq.n	80011de <LL_EXTI_Init+0x9a>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d00b      	beq.n	80011f4 <LL_EXTI_Init+0xb0>
 80011dc:	e020      	b.n	8001220 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff86 	bl	80010f4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff11 	bl	8001014 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80011f2:	e01b      	b.n	800122c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff2f 	bl	800105c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff52 	bl	80010ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001208:	e010      	b.n	800122c <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff00 	bl	8001014 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff47 	bl	80010ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800121e:	e005      	b.n	800122c <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
            break;
 8001228:	e000      	b.n	800122c <LL_EXTI_Init+0xe8>
        }
      }
 800122a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d07a      	beq.n	800132a <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7a5b      	ldrb	r3, [r3, #9]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d01c      	beq.n	8001276 <LL_EXTI_Init+0x132>
 800123c:	2b02      	cmp	r3, #2
 800123e:	dc25      	bgt.n	800128c <LL_EXTI_Init+0x148>
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <LL_EXTI_Init+0x106>
 8001244:	2b01      	cmp	r3, #1
 8001246:	d00b      	beq.n	8001260 <LL_EXTI_Init+0x11c>
 8001248:	e020      	b.n	800128c <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fecc 	bl	8000fec <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe55 	bl	8000f08 <LL_EXTI_EnableIT_32_63>
          break;
 800125e:	e01a      	b.n	8001296 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe75 	bl	8000f54 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe96 	bl	8000fa0 <LL_EXTI_EnableEvent_32_63>
          break;
 8001274:	e00f      	b.n	8001296 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe44 	bl	8000f08 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe8b 	bl	8000fa0 <LL_EXTI_EnableEvent_32_63>
          break;
 800128a:	e004      	b.n	8001296 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	60fb      	str	r3, [r7, #12]
          break;
 8001294:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7a9b      	ldrb	r3, [r3, #10]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d045      	beq.n	800132a <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7a9b      	ldrb	r3, [r3, #10]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d01c      	beq.n	80012e0 <LL_EXTI_Init+0x19c>
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	dc25      	bgt.n	80012f6 <LL_EXTI_Init+0x1b2>
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d002      	beq.n	80012b4 <LL_EXTI_Init+0x170>
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d00b      	beq.n	80012ca <LL_EXTI_Init+0x186>
 80012b2:	e020      	b.n	80012f6 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff2f 	bl	800111c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff feb8 	bl	8001038 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80012c8:	e030      	b.n	800132c <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fed8 	bl	8001084 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fef9 	bl	80010d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80012de:	e025      	b.n	800132c <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fea7 	bl	8001038 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff feee 	bl	80010d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80012f4:	e01a      	b.n	800132c <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f043 0305 	orr.w	r3, r3, #5
 80012fc:	60fb      	str	r3, [r7, #12]
            break;
 80012fe:	e015      	b.n	800132c <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe11 	bl	8000f2c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe58 	bl	8000fc4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe1b 	bl	8000f54 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe62 	bl	8000fec <LL_EXTI_DisableEvent_32_63>
 8001328:	e000      	b.n	800132c <LL_EXTI_Init+0x1e8>
      }
 800132a:	bf00      	nop
  }

  return status;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <LL_GPIO_SetPinMode>:
{
 8001336:	b480      	push	{r7}
 8001338:	b08b      	sub	sp, #44	; 0x2c
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	613b      	str	r3, [r7, #16]
  return result;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800135c:	2320      	movs	r3, #32
 800135e:	e003      	b.n	8001368 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2103      	movs	r1, #3
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	401a      	ands	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	61fb      	str	r3, [r7, #28]
  return result;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800138a:	2320      	movs	r3, #32
 800138c:	e003      	b.n	8001396 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	372c      	adds	r7, #44	; 0x2c
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_GPIO_SetPinOutputType>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	401a      	ands	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	431a      	orrs	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_GPIO_SetPinSpeed>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	613b      	str	r3, [r7, #16]
  return result;
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001406:	2320      	movs	r3, #32
 8001408:	e003      	b.n	8001412 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2103      	movs	r1, #3
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	401a      	ands	r2, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	61fb      	str	r3, [r7, #28]
  return result;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001434:	2320      	movs	r3, #32
 8001436:	e003      	b.n	8001440 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	609a      	str	r2, [r3, #8]
}
 800144e:	bf00      	nop
 8001450:	372c      	adds	r7, #44	; 0x2c
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_GPIO_SetPinPull>:
{
 800145a:	b480      	push	{r7}
 800145c:	b08b      	sub	sp, #44	; 0x2c
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	613b      	str	r3, [r7, #16]
  return result;
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001480:	2320      	movs	r3, #32
 8001482:	e003      	b.n	800148c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fab3 f383 	clz	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2103      	movs	r1, #3
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	61fb      	str	r3, [r7, #28]
  return result;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80014ae:	2320      	movs	r3, #32
 80014b0:	e003      	b.n	80014ba <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	60da      	str	r2, [r3, #12]
}
 80014c8:	bf00      	nop
 80014ca:	372c      	adds	r7, #44	; 0x2c
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <LL_GPIO_SetAFPin_0_7>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	613b      	str	r3, [r7, #16]
  return result;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80014fa:	2320      	movs	r3, #32
 80014fc:	e003      	b.n	8001506 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	210f      	movs	r1, #15
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	401a      	ands	r2, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	61fb      	str	r3, [r7, #28]
  return result;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001528:	2320      	movs	r3, #32
 800152a:	e003      	b.n	8001534 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	431a      	orrs	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	621a      	str	r2, [r3, #32]
}
 8001542:	bf00      	nop
 8001544:	372c      	adds	r7, #44	; 0x2c
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_GPIO_SetAFPin_8_15>:
{
 800154e:	b480      	push	{r7}
 8001550:	b08b      	sub	sp, #44	; 0x2c
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	613b      	str	r3, [r7, #16]
  return result;
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001576:	2320      	movs	r3, #32
 8001578:	e003      	b.n	8001582 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	fab3 f383 	clz	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	210f      	movs	r1, #15
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	401a      	ands	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	61fb      	str	r3, [r7, #28]
  return result;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80015a6:	2320      	movs	r3, #32
 80015a8:	e003      	b.n	80015b2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	431a      	orrs	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80015c0:	bf00      	nop
 80015c2:	372c      	adds	r7, #44	; 0x2c
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	60fb      	str	r3, [r7, #12]
  return result;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <LL_GPIO_Init+0x26>
    return 32U;
 80015ee:	2320      	movs	r3, #32
 80015f0:	e003      	b.n	80015fa <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80015fc:	e048      	b.n	8001690 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2101      	movs	r1, #1
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d03a      	beq.n	800168a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d003      	beq.n	8001624 <LL_GPIO_Init+0x58>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d10e      	bne.n	8001642 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	461a      	mov	r2, r3
 800162a:	69b9      	ldr	r1, [r7, #24]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff fed7 	bl	80013e0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	461a      	mov	r2, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff feb7 	bl	80013b0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	461a      	mov	r2, r3
 8001648:	69b9      	ldr	r1, [r7, #24]
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ff05 	bl	800145a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d111      	bne.n	800167c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2bff      	cmp	r3, #255	; 0xff
 800165c:	d807      	bhi.n	800166e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	461a      	mov	r2, r3
 8001664:	69b9      	ldr	r1, [r7, #24]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff34 	bl	80014d4 <LL_GPIO_SetAFPin_0_7>
 800166c:	e006      	b.n	800167c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	461a      	mov	r2, r3
 8001674:	69b9      	ldr	r1, [r7, #24]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff69 	bl	800154e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	461a      	mov	r2, r3
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fe56 	bl	8001336 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1af      	bne.n	80015fe <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <LL_TIM_SetPrescaler>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_TIM_SetAutoReload>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_TIM_SetRepetitionCounter>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_TIM_OC_SetCompareCH1>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_TIM_OC_SetCompareCH2>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_TIM_OC_SetCompareCH3>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_TIM_OC_SetCompareCH4>:
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_TIM_OC_SetCompareCH5>:
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_TIM_OC_SetCompareCH6>:
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_TIM_GenerateEvent_UPDATE>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f043 0201 	orr.w	r2, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	615a      	str	r2, [r3, #20]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a39      	ldr	r2, [pc, #228]	; (80018c0 <LL_TIM_Init+0xf8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00f      	beq.n	8001800 <LL_TIM_Init+0x38>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e6:	d00b      	beq.n	8001800 <LL_TIM_Init+0x38>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a36      	ldr	r2, [pc, #216]	; (80018c4 <LL_TIM_Init+0xfc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d007      	beq.n	8001800 <LL_TIM_Init+0x38>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a35      	ldr	r2, [pc, #212]	; (80018c8 <LL_TIM_Init+0x100>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d003      	beq.n	8001800 <LL_TIM_Init+0x38>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <LL_TIM_Init+0x104>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d106      	bne.n	800180e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a2b      	ldr	r2, [pc, #172]	; (80018c0 <LL_TIM_Init+0xf8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01b      	beq.n	800184e <LL_TIM_Init+0x86>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d017      	beq.n	800184e <LL_TIM_Init+0x86>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <LL_TIM_Init+0xfc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <LL_TIM_Init+0x86>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a27      	ldr	r2, [pc, #156]	; (80018c8 <LL_TIM_Init+0x100>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00f      	beq.n	800184e <LL_TIM_Init+0x86>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a26      	ldr	r2, [pc, #152]	; (80018cc <LL_TIM_Init+0x104>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00b      	beq.n	800184e <LL_TIM_Init+0x86>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <LL_TIM_Init+0x108>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <LL_TIM_Init+0x86>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <LL_TIM_Init+0x10c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d003      	beq.n	800184e <LL_TIM_Init+0x86>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <LL_TIM_Init+0x110>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d106      	bne.n	800185c <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff2b 	bl	80016c4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff17 	bl	80016a8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <LL_TIM_Init+0xf8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00f      	beq.n	80018a2 <LL_TIM_Init+0xda>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <LL_TIM_Init+0x104>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00b      	beq.n	80018a2 <LL_TIM_Init+0xda>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <LL_TIM_Init+0x108>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <LL_TIM_Init+0xda>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <LL_TIM_Init+0x10c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d003      	beq.n	80018a2 <LL_TIM_Init+0xda>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <LL_TIM_Init+0x110>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d105      	bne.n	80018ae <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff19 	bl	80016e0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff7a 	bl	80017a8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	40000400 	.word	0x40000400
 80018c8:	40000800 	.word	0x40000800
 80018cc:	40013400 	.word	0x40013400
 80018d0:	40014000 	.word	0x40014000
 80018d4:	40014400 	.word	0x40014400
 80018d8:	40014800 	.word	0x40014800

080018dc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018f2:	d045      	beq.n	8001980 <LL_TIM_OC_Init+0xa4>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018fa:	d848      	bhi.n	800198e <LL_TIM_OC_Init+0xb2>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001902:	d036      	beq.n	8001972 <LL_TIM_OC_Init+0x96>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190a:	d840      	bhi.n	800198e <LL_TIM_OC_Init+0xb2>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001912:	d027      	beq.n	8001964 <LL_TIM_OC_Init+0x88>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800191a:	d838      	bhi.n	800198e <LL_TIM_OC_Init+0xb2>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001922:	d018      	beq.n	8001956 <LL_TIM_OC_Init+0x7a>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800192a:	d830      	bhi.n	800198e <LL_TIM_OC_Init+0xb2>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d003      	beq.n	800193a <LL_TIM_OC_Init+0x5e>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b10      	cmp	r3, #16
 8001936:	d007      	beq.n	8001948 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001938:	e029      	b.n	800198e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f8b5 	bl	8001aac <OC1Config>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]
      break;
 8001946:	e023      	b.n	8001990 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f92e 	bl	8001bac <OC2Config>
 8001950:	4603      	mov	r3, r0
 8001952:	75fb      	strb	r3, [r7, #23]
      break;
 8001954:	e01c      	b.n	8001990 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f9ab 	bl	8001cb4 <OC3Config>
 800195e:	4603      	mov	r3, r0
 8001960:	75fb      	strb	r3, [r7, #23]
      break;
 8001962:	e015      	b.n	8001990 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fa28 	bl	8001dbc <OC4Config>
 800196c:	4603      	mov	r3, r0
 800196e:	75fb      	strb	r3, [r7, #23]
      break;
 8001970:	e00e      	b.n	8001990 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 faa5 	bl	8001ec4 <OC5Config>
 800197a:	4603      	mov	r3, r0
 800197c:	75fb      	strb	r3, [r7, #23]
      break;
 800197e:	e007      	b.n	8001990 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 fb02 	bl	8001f8c <OC6Config>
 8001988:	4603      	mov	r3, r0
 800198a:	75fb      	strb	r3, [r7, #23]
      break;
 800198c:	e000      	b.n	8001990 <LL_TIM_OC_Init+0xb4>
      break;
 800198e:	bf00      	nop
  }

  return result;
 8001990:	7dfb      	ldrb	r3, [r7, #23]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	7b12      	ldrb	r2, [r2, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	89d2      	ldrh	r2, [r2, #14]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <LL_TIM_BDTR_Init+0x108>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d003      	beq.n	8001a2a <LL_TIM_BDTR_Init+0x8e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <LL_TIM_BDTR_Init+0x10c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10d      	bne.n	8001a46 <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <LL_TIM_BDTR_Init+0x108>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d003      	beq.n	8001a56 <LL_TIM_BDTR_Init+0xba>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <LL_TIM_BDTR_Init+0x10c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d11b      	bne.n	8001a8e <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	4313      	orrs	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40013400 	.word	0x40013400

08001aac <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	f023 0201 	bic.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f023 0202 	bic.w	r2, r3, #2
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f023 0201 	bic.w	r2, r3, #1
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a22      	ldr	r2, [pc, #136]	; (8001b98 <OC1Config+0xec>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00f      	beq.n	8001b32 <OC1Config+0x86>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <OC1Config+0xf0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00b      	beq.n	8001b32 <OC1Config+0x86>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <OC1Config+0xf4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <OC1Config+0x86>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <OC1Config+0xf8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d003      	beq.n	8001b32 <OC1Config+0x86>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <OC1Config+0xfc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d11e      	bne.n	8001b70 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f023 0208 	bic.w	r2, r3, #8
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f023 0204 	bic.w	r2, r3, #4
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4619      	mov	r1, r3
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fdba 	bl	80016fc <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40012c00 	.word	0x40012c00
 8001b9c:	40013400 	.word	0x40013400
 8001ba0:	40014000 	.word	0x40014000
 8001ba4:	40014400 	.word	0x40014400
 8001ba8:	40014800 	.word	0x40014800

08001bac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	f023 0210 	bic.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	0212      	lsls	r2, r2, #8
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f023 0220 	bic.w	r2, r3, #32
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f023 0210 	bic.w	r2, r3, #16
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <OC2Config+0xf4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d00f      	beq.n	8001c38 <OC2Config+0x8c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <OC2Config+0xf8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00b      	beq.n	8001c38 <OC2Config+0x8c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <OC2Config+0xfc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d007      	beq.n	8001c38 <OC2Config+0x8c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a20      	ldr	r2, [pc, #128]	; (8001cac <OC2Config+0x100>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d003      	beq.n	8001c38 <OC2Config+0x8c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <OC2Config+0x104>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11f      	bne.n	8001c78 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	019b      	lsls	r3, r3, #6
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	019b      	lsls	r3, r3, #6
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fd44 	bl	8001718 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40012c00 	.word	0x40012c00
 8001ca4:	40013400 	.word	0x40013400
 8001ca8:	40014000 	.word	0x40014000
 8001cac:	40014400 	.word	0x40014400
 8001cb0:	40014800 	.word	0x40014800

08001cb4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <OC3Config+0xf4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00f      	beq.n	8001d3e <OC3Config+0x8a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <OC3Config+0xf8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00b      	beq.n	8001d3e <OC3Config+0x8a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a21      	ldr	r2, [pc, #132]	; (8001db0 <OC3Config+0xfc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <OC3Config+0x8a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <OC3Config+0x100>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d003      	beq.n	8001d3e <OC3Config+0x8a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <OC3Config+0x104>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d11f      	bne.n	8001d7e <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	029b      	lsls	r3, r3, #10
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	015b      	lsls	r3, r3, #5
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fccf 	bl	8001734 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40013400 	.word	0x40013400
 8001db0:	40014000 	.word	0x40014000
 8001db4:	40014400 	.word	0x40014400
 8001db8:	40014800 	.word	0x40014800

08001dbc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	0212      	lsls	r2, r2, #8
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	031b      	lsls	r3, r3, #12
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	031b      	lsls	r3, r3, #12
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <OC4Config+0xf4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00f      	beq.n	8001e48 <OC4Config+0x8c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a22      	ldr	r2, [pc, #136]	; (8001eb4 <OC4Config+0xf8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00b      	beq.n	8001e48 <OC4Config+0x8c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <OC4Config+0xfc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <OC4Config+0x8c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <OC4Config+0x100>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <OC4Config+0x8c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <OC4Config+0x104>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d11f      	bne.n	8001e88 <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	039b      	lsls	r3, r3, #14
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	039b      	lsls	r3, r3, #14
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	01db      	lsls	r3, r3, #7
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fc58 	bl	8001750 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40013400 	.word	0x40013400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40014400 	.word	0x40014400
 8001ec0:	40014800 	.word	0x40014800

08001ec4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <OC5Config+0xb4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00f      	beq.n	8001f40 <OC5Config+0x7c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <OC5Config+0xb8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <OC5Config+0x7c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <OC5Config+0xbc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <OC5Config+0x7c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <OC5Config+0xc0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <OC5Config+0x7c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <OC5Config+0xc4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d109      	bne.n	8001f54 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fc03 	bl	800176c <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40013400 	.word	0x40013400
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40014400 	.word	0x40014400
 8001f88:	40014800 	.word	0x40014800

08001f8c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fac:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	0212      	lsls	r2, r2, #8
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	051b      	lsls	r3, r3, #20
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	051b      	lsls	r3, r3, #20
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <OC6Config+0xb4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00f      	beq.n	800200a <OC6Config+0x7e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <OC6Config+0xb8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00b      	beq.n	800200a <OC6Config+0x7e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <OC6Config+0xbc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <OC6Config+0x7e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <OC6Config+0xc0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d003      	beq.n	800200a <OC6Config+0x7e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <OC6Config+0xc4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d109      	bne.n	800201e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fbae 	bl	800178c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40013400 	.word	0x40013400
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800

08002054 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <LL_InitTick+0x30>)
 8002068:	3b01      	subs	r3, #1
 800206a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <LL_InitTick+0x30>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <LL_InitTick+0x30>)
 8002074:	2205      	movs	r2, #5
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e010 	.word	0xe000e010

08002088 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ffdd 	bl	8002054 <LL_InitTick>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <LL_SetSystemCoreClock+0x1c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000000 	.word	0x20000000

080020c4 <__libc_init_array>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4d0d      	ldr	r5, [pc, #52]	; (80020fc <__libc_init_array+0x38>)
 80020c8:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <__libc_init_array+0x3c>)
 80020ca:	1b64      	subs	r4, r4, r5
 80020cc:	10a4      	asrs	r4, r4, #2
 80020ce:	2600      	movs	r6, #0
 80020d0:	42a6      	cmp	r6, r4
 80020d2:	d109      	bne.n	80020e8 <__libc_init_array+0x24>
 80020d4:	4d0b      	ldr	r5, [pc, #44]	; (8002104 <__libc_init_array+0x40>)
 80020d6:	4c0c      	ldr	r4, [pc, #48]	; (8002108 <__libc_init_array+0x44>)
 80020d8:	f000 f820 	bl	800211c <_init>
 80020dc:	1b64      	subs	r4, r4, r5
 80020de:	10a4      	asrs	r4, r4, #2
 80020e0:	2600      	movs	r6, #0
 80020e2:	42a6      	cmp	r6, r4
 80020e4:	d105      	bne.n	80020f2 <__libc_init_array+0x2e>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ec:	4798      	blx	r3
 80020ee:	3601      	adds	r6, #1
 80020f0:	e7ee      	b.n	80020d0 <__libc_init_array+0xc>
 80020f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f6:	4798      	blx	r3
 80020f8:	3601      	adds	r6, #1
 80020fa:	e7f2      	b.n	80020e2 <__libc_init_array+0x1e>
 80020fc:	0800214c 	.word	0x0800214c
 8002100:	0800214c 	.word	0x0800214c
 8002104:	0800214c 	.word	0x0800214c
 8002108:	08002150 	.word	0x08002150

0800210c <memset>:
 800210c:	4402      	add	r2, r0
 800210e:	4603      	mov	r3, r0
 8002110:	4293      	cmp	r3, r2
 8002112:	d100      	bne.n	8002116 <memset+0xa>
 8002114:	4770      	bx	lr
 8002116:	f803 1b01 	strb.w	r1, [r3], #1
 800211a:	e7f9      	b.n	8002110 <memset+0x4>

0800211c <_init>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr

08002128 <_fini>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr
